rgee uses earthengine_api package, which depends on Python. That's why we need to setting up local PYthon environment for using rgee.




> # Initialize Google Earth Engine API for current session
> ee_Initialize()


Error in ee_connect_to_py(path = ee_current_version, n = 5) :
  The current Python PATH: /home/oleh/.virtualenvs/rgee/bin/python
does not have the Python package "earthengine-api" installed. Are you restarted/terminated.
your R session after install miniconda or run ee_install()?
If no do it, please try again:
> ee_install(): To create and set a Python environment with all rgee dependencies.
> ee_install_set_pyenv(): To set a specific Python environment.
> ## It is necessary just once to complete installation necessary dependencies
> ee_install()
───────────────────────────────────────────────────────────────────────── Python configuration used to create rgee ──
python:         /home/oleh/.local/share/r-miniconda/envs/r-reticulate/bin/python
libpython:      /home/oleh/.local/share/r-miniconda/envs/r-reticulate/lib/libpython3.8.so
pythonhome:     /home/oleh/.local/share/r-miniconda/envs/r-reticulate:/home/oleh/.local/share/r-miniconda/envs/r-reticulate
version:        3.8.12 | packaged by conda-forge | (default, Jan 30 2022, 23:53:36)  [GCC 9.4.0]
numpy:          /home/oleh/.local/share/r-miniconda/envs/r-reticulate/lib/python3.8/site-packages/numpy
numpy_version:  1.22.3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
1. Removing the previous Python Environment (rgee), if it exists ...
Virtual environment 'rgee' removed.

2. Creating a Python Environment (rgee)
Error in value[[3L]](cond) :
  An error occur when ee_install was creating the Python Environment. Run ee_clean_pyenv() and restart the R session, before trying again.


ee_clean_pyenv()

Restarting R session...

library(rgee) # because libraries have been detached after session Restarting

ee_install()



1. Removing the previous Python Environment (rgee), if it exists ...
rgee not found


2. Creating a Python Environment (rgee)
Using Python: /home/oleh/.local/share/r-miniconda/envs/r-reticulate/bin/python3.8
Creating virtual environment 'rgee' ... Done!

rgee::ee_install want to store the environment variables: EARTHENGINE_PYTHON
and EARTHENGINE_ENV in your .Renviron file to use the Python path:
/home/oleh/.virtualenvs/rgee/bin/python in future sessions.
Would you like to continues? [Y/n]:y

3. The Environment Variables: 'EARTHENGINE_PYTHON=/home/oleh/.virtualenvs/rgee/bin/python' and 'EARTHENGINE_ENV=rgee'
were saved in the .Renviron (/home/oleh/.Renviron) file. Remember that you
could remove EARTHENGINE_PYTHON and EARTHENGINE_ENV using rgee::ee_clean_pyenv().

4. Installing the earthengine-api. Running:
reticulate::py_install(packages = 'earthengine-api', envname = '~/.virtualenvs/rgee')




Well done! rgee was successfully set up in your system.
You need restart R to see changes. After doing that, we recommend
run ee_check() to perform a full check of all non-R rgee dependencies.
Do you want restart your R session?

1: yes
2: no

After restarting R session your should recall rgee library and check installation status manually

library(rgee)

ee_check()

◉  Python version
✓ [Ok] /home/oleh/.virtualenvs/rgee/bin/python v3.8
◉  Python packages:
✓ [Ok] numpy
✓ [Ok] earthengine-api
NOTE: The Earth Engine Python API version 0.1.304 is installed
correctly in the system but rgee was tested using the version
0.1.299. To avoid possible issues, we recommend install the
version used by rgee (0.1.299). You might use:
* rgee::ee_install_upgrade()
* reticulate::py_install('earthengine-api==0.1.299', envname='PUT_HERE_YOUR_PYENV')
* pip install earthengine-api==0.1.299 (Linux and Mac0S)
* conda install earthengine-api==0.1.299 (Linux, Mac0S, and Windows)


ee_install_upgrade()

Previous command upgrade (or even downgrade, for me at least) your earthengine_api to the most tested and supported version. That's odd, isn't it?

After that, when you execute the command

ee_Initialize()

you will be re-directered to web browser for logging into your Google Earth Engine account and confirm access rights.
An authorization code generated during this step should be pasted into R console to finalize authentification.

Unfortantly, you have to repeat environment setting and re-authorization each time Python gets updates. For actively updated systems, like regular versions of Ubuntu linux, it is quite annoynig. On the other hand, this built-in reparing system protects you from accidentally breaking eartengine Python environment during installation or using any other Python-related tools, which is convenient at least if you are such a dummy Python user as me.
